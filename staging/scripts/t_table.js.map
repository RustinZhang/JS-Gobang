{"version":3,"sources":["t_table.js"],"names":["T_Table","trans_table","hash_key","hash_checksum","size","hash_lookup","zobristInit","board","stone","i","j","undefined","entry","alpha","beta","depth","n","has","get","type","value","set","zobrist","push","length","k","Math","floor","random","t_table"],"mappings":"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","file":"t_table.js","sourcesContent":["/**\n * @fileOverview 置换表模块。采用深度搜索，会面临很多相同的局面，将评估过的局面存入置换表，下次遇到可以直接从表中调取得分。事实上抽象的数据结构是一个哈希表，这里采用 Object 实现，用 Map 会更直观一些，待有时间重构时可能会考虑更改。置换表采用的策略是用内存空间换取CPU计算时间。\n */\n/**\n * @module t_table\n */\n\n\"use strict\";\n/**\n * 置换表类\n * @see <a href='https://en.wikipedia.org/wiki/Transposition_table'>Transposition_table</a>\n */\nclass T_Table {\n    /**\n     * Create a t_table\n     * 数据结构方面，散列查找使用哈希表，连续小数据采用数组\n     */\n    constructor() {\n        this.trans_table = new Map();\n        this.hash_key = 0;\n        this.hash_checksum = 0;\n        this.size = 50e7;\n        this.hash_lookup = T_Table.zobristInit();\n    }\n    \n    /**\n     * 使用置换表最大的问题是如何设计一套规则表示独特的局面避免冲突，Zobrist 算法是实现之一。该算法首先对棋盘所有位置相应的棋子类型分别生成32位和64位两组随机数，并将所有棋盘上的棋子两组随机数分别相加，32位的随机数%哈希表作为键，64位的随机数作为 checksum，存在值的对象中。之后每走一步就只针对最后一步变化做增量减量计算，可以使用位运算，也可以使用加减（这里是抽象的算法，不涉及语言）。\n     * @see <a href='https://en.wikipedia.org/wiki/Zobrist_hashing'>Zobrist Hashing on wiki</a>\n     * @returns {Array}\n     */\n    static zobristInit() {\n        let zobrist = [];\n        for (let i = 15; i--;) {\n            zobrist.push(Array.from({length: 15}));\n        }\n        for (let i = 0; i < 15; i++) {\n            for (let j = 0; j < 15; j++) {\n                zobrist[i][j] = [[], []];\n                for (let k = 0; k < 2; k++) {\n                    zobrist[i][j][k][0] = Math.floor(Math.random() * 10e12);\n                    zobrist[i][j][k][1] = Math.floor(Math.random() * 10e12);\n                }\n            }\n        }\n        return zobrist;\n    }\n    \n    /**\n     * 调用搜索函数前，先计算当前棋盘的哈希值，每次下棋前都对棋盘重新计算，因为只进行一次，代价不会太高，可以少保存一个变量，也可以让玩家下子和AI计算之间的耦合更松，方便悔棋等的操作\n     * @param board {array} 当前棋盘\n     */\n    calculateInitHashKey(board) {\n        let stone;\n        this.hash_key = 0;\n        this.hash_checksum = 0;\n        for (let i = 0; i < 15; i++) {\n            for (let j = 0; j < 15; j++) {\n                stone = board[i][j];\n                if (stone !== undefined) {\n                    this.hash_key += stone ? this.hash_lookup[i][j][1][0] : this.hash_lookup[i][j][0][0];\n                    this.hash_checksum += stone ? this.hash_lookup[i][j][1][1] : this.hash_lookup[i][j][0][1];\n                }\n            }\n        }\n    }\n    \n    /**\n     * 新下一个棋子，计算新的棋盘哈希值，采用加法计算，JS在位运算时需要转换数值类型，且目前位数超过32位，未采用位运算, 本程序中还加了一层判断，在键相同的同时只有搜索深度相等时才算命中（有的程序采用的是奇偶相同（敌我）算命中），这样会减少一定的命中次数，但相同层数的命中才是更普遍的。而且这样有一个好处即是能够减少冲突，也避免了两个随机数拼接成字符串对性能的影响\n     * @param entry {Array}  当前棋子坐标\n     * @param board {Array}  当前棋盘\n     */\n    hashMakeMove(entry, board) {\n        let i = entry[0], j = entry[1], stone = board[i][j];\n        this.hash_key += stone ? this.hash_lookup[i][j][1][0] : this.hash_lookup[i][j][0][0];\n        this.hash_checksum += stone ? this.hash_lookup[i][j][1][1] : this.hash_lookup[i][j][0][1];\n    }\n    \n    /**\n     * AI取消一个棋子\n     * @param entry {Array}\n     * @param board {Array}\n     */\n    hashUnMakeMove(entry, board) {\n        let i = entry[0], j = entry[1], stone = board[i][j];\n        this.hash_key -= stone ? this.hash_lookup[i][j][1][0] : this.hash_lookup[i][j][0][0];\n        this.hash_checksum -= stone ? this.hash_lookup[i][j][1][1] : this.hash_lookup[i][j][0][1];\n    }\n    \n    /**\n     * 查看当前局面是否在哈希表中，存储的节点分为三种，即精确计算过的值和剪枝得到的上下边界\n     * @param alpha {number}\n     * @param beta  {number}\n     * @param depth {number}\n     * @returns {number}\n     */\n    lookUpHashTable(alpha, beta, depth) {\n        let n = this.hash_key % this.size, entry;\n        if (!this.trans_table.has(n)) return 404404; //\n        entry = this.trans_table.get(n);\n        if (entry[3] !== depth) return 404404\n        if (entry[0] === this.hash_checksum) {\n            switch (entry[1]) {\n                case 0:\n                    return entry[2];\n                    break;\n                case 1: // lower_bound\n                    if (entry[2] >= beta) {\n                        return entry[2];\n                    }\n                    break;\n                case -1: //upper_bound\n                    if (entry[2] <= alpha) {\n                        return entry[2];\n                    }\n                    break;\n            }\n        }\n        return 404404; // 不存在，返回一个不在评分范围内的约定值\n    }\n    \n    /**\n     * 将数据存入哈希表\n     * @param type {string}\n     * @param value {number}\n     * @param depth {number}\n     */\n    enterHashTable(type, value, depth) {\n        let n = this.hash_key % this.size;\n        this.trans_table.set(n, [this.hash_checksum, type, value, depth])\n    }\n}\n/** export the instance of T_Table  */\nexport let t_table = new T_Table();"]}